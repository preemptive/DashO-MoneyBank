/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.  * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'pink.madis.gradle:localprops:0.0.2'
    }
}

apply plugin: 'pink.madis.gradle.localprops'

apply plugin: 'java'

compileJava   {
  sourceCompatibility = '1.7'
  targetCompatibility = '1.7'
}

configurations {
    volleyForExtract {
        transitive false
    }
} 

dependencies {
    volleyForExtract 'com.android.volley:volley:1.1.1'
    implementation files('lib/volley-classes.jar', "${project.localprops.ANDROID_SDK_JAR}")
}


// We need to extract the classes jar from Volley in order to compile our Java against it
// with the Java plugin
task extractVolley(type: Copy) {
    from {
        configurations.volleyForExtract.collect { zipTree(it) }
    }
    into 'lib'
    include 'classes.jar'
    rename ('classes.jar', 'volley-classes.jar')
}

project.tasks.compileJava.dependsOn project.tasks.extractVolley

// Delete the volley-classes.jar on clean
clean.doFirst {
    delete 'lib'
}

// Extract DEX code from the APK
task unpackDex(type: Copy) {
    from zipTree('app.apk')
    into 'build/dexExtract'
    include 'classes*.dex'
}

// Convert the DEX into Java Bytecode in a jar
task undex(type: Exec) {
    dependsOn 'unpackDex'
    inputs.files 'build/dexExtract/classes.dex'
    outputs.files 'build/undex/classes.jar'
    commandLine 'tools/dextools/d2j-dex2jar.sh', 'build/dexExtract/classes.dex', '-o', 'build/undex/classes.jar', '--force'
}

// Extract the classes from the jar
task unpackClasses(type: Copy) {
    dependsOn 'undex'
    from zipTree('build/undex/classes.jar')
    into 'build/unpack-classes'
}

// Assemble a new jar with the classes from unpackClasses, but replace RequestQueueSingleton with
// our modified version
task replaceClass(type: Zip) {
    dependsOn 'unpackClasses', 'build'

    archiveFileName = 'classes.jar'
    destinationDirectory = file('build/modifiedJar')

    from ('build/unpack-classes') {
        exclude ('com/preemptive/moneybank/api/RequestQueueSingleton.class')    
    }   

    from ('build/classes/java/main') {
        include ('**')
    }
}

// Convert our new jar into a new DEX file
task redex(type: Exec) {
    dependsOn 'replaceClass'
    inputs.files 'build/modifiedJar/classes.jar'
    outputs.files 'build/redex/classes.dex'
    commandLine 'tools/dextools/d2j-jar2dex.sh', 'build/modifiedJar/classes.jar', '-o', 'build/redex/classes.dex', '--force'
}

task unpackApk(type: Copy) {
    from zipTree('app.apk')
    into 'build/apk-extract'
    exclude 'classes.dex'
}

task replaceDex(type: Zip) {
    dependsOn 'redex', 'unpackApk'
    archiveFileName = 'app.apk'
    destinationDirectory = file('build/output-apk')

    from ('build/apk-extract') {
        include ('**')
    }

    from ('build/redex') {
        include ('classes.dex')
    }
}

task resign(type: Exec) {
    dependsOn 'replaceDex'
    inputs.files 'build/output-apk/app.apk'
    outputs.files 'build/output-apk/app.apk'
    commandLine "${project.localprops.APKSIGNER}", 'sign', '--ks', "${project.localprops.KEYSTORE}", '--ks-pass', 'pass:android', 'build/output-apk/app.apk'
}
